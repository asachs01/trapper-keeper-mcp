name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For PyPI trusted publishing

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        if: github.event_name == 'push'
        run: |
          if ! [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
            echo "Invalid tag format. Expected: v1.2.3 or v1.2.3-rc.1"
            exit 1
          fi

      - name: Check CHANGELOG
        run: |
          if ! grep -q "## \[${{ github.ref_name }}\]" CHANGELOG.md 2>/dev/null; then
            echo "Warning: No CHANGELOG entry found for ${{ github.ref_name }}"
          fi

  test:
    name: Test Release Build
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution
        run: |
          python -m build

      - name: Check distribution
        run: |
          twine check dist/*
          ls -la dist/

      - name: Test installation
        run: |
          pip install dist/*.whl
          trapper-keeper --version
          pip uninstall -y trapper-keeper-mcp

  build-docker:
    name: Build Docker Image
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  publish-pypi:
    name: Publish to PyPI
    needs: [test, build-docker]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/trapper-keeper-mcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build distribution
        run: |
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  create-release:
    name: Create GitHub Release
    needs: [publish-pypi]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract release notes
        id: extract_notes
        run: |
          # Extract release notes from CHANGELOG.md
          VERSION="${{ github.ref_name }}"
          NOTES=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md 2>/dev/null | sed '1d;$d' || echo "No release notes found.")
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.ref_name }}
          body: |
            ## What's Changed

            ${{ steps.extract_notes.outputs.notes }}

            ## Installation

            ```bash
            pip install trapper-keeper-mcp==${{ github.ref_name }}
            ```

            ## Docker

            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.repository.default_branch }}...${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notifications
    needs: [create-release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send success notification
        if: needs.create-release.result == 'success'
        run: |
          echo "Release ${{ github.ref_name }} completed successfully!"
          # Add your notification logic here (Slack, Discord, email, etc.)

      - name: Send failure notification
        if: needs.create-release.result != 'success'
        run: |
          echo "Release ${{ github.ref_name }} failed!"
          # Add your notification logic here