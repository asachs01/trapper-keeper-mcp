# Docker Compose configuration for Trapper Keeper MCP
version: '3.8'

services:
  # Trapper Keeper MCP Server
  trapper-keeper:
    build:
      context: ../..
      dockerfile: Dockerfile
    image: trapper-keeper-mcp:latest
    container_name: trapper-keeper
    ports:
      - "3000:3000"      # MCP server port
      - "9090:9090"      # Metrics port
    environment:
      - TRAPPER_KEEPER_LOG_LEVEL=INFO
      - TRAPPER_KEEPER_MCP_HOST=0.0.0.0
      - TRAPPER_KEEPER_MCP_PORT=3000
      - TRAPPER_KEEPER_METRICS_ENABLED=true
      - TRAPPER_KEEPER_METRICS_PORT=9090
      - TRAPPER_KEEPER_OUTPUT_DIR=/output
      - TRAPPER_KEEPER_CACHE_BACKEND=redis
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./docs:/docs:ro
      - ./output:/output
      - trapper-keeper-cache:/cache
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: trapper-keeper-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trapper-keeper-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trapper-keeper-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboard.json:/var/lib/grafana/dashboards/dashboard.json:ro
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # File watcher service (optional)
  watcher:
    build:
      context: ../..
      dockerfile: Dockerfile
    image: trapper-keeper-mcp:latest
    container_name: trapper-keeper-watcher
    command: ["python", "-m", "trapper_keeper.cli", "watch", "/watch", "--auto-organize"]
    environment:
      - TRAPPER_KEEPER_LOG_LEVEL=INFO
      - TRAPPER_KEEPER_OUTPUT_DIR=/output
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./watch:/watch:ro
      - ./output:/output
    depends_on:
      - redis
    restart: unless-stopped

  # API wrapper service (optional)
  api:
    build:
      context: ../..
      dockerfile: Dockerfile.api
    image: trapper-keeper-api:latest
    container_name: trapper-keeper-api
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - TRAPPER_KEEPER_CONFIG=/app/config.yaml
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./output:/output
    depends_on:
      - redis
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: trapper-keeper-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./output:/usr/share/nginx/html:ro
    depends_on:
      - trapper-keeper
      - api
    restart: unless-stopped

volumes:
  trapper-keeper-cache:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: trapper-keeper-network