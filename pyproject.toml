[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "trapper-keeper-mcp"
dynamic = ["version"]
description = "A Model Context Protocol server for intelligent document extraction and organization"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["mcp", "llm", "document-processing", "markdown", "knowledge-management", "ai", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastmcp>=0.1.0",
    "aiofiles>=23.0.0",
    "watchdog>=3.0.0",
    "python-frontmatter>=1.0.0",
    "markdown>=3.5.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "anyio>=4.0.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    "humanize>=4.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.3.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "tox>=4.6.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
    "setuptools>=68.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.3.0",
    "faker>=19.0.0",
    "factory-boy>=3.3.0",
    "hypothesis>=6.82.0",
]

[project.scripts]
trapper-keeper = "trapper_keeper.cli.main:cli"
trapper-keeper-mcp = "trapper_keeper.mcp.server:main"

[project.urls]
Homepage = "https://github.com/yourusername/trapper-keeper-mcp"
Documentation = "https://github.com/yourusername/trapper-keeper-mcp#readme"
Repository = "https://github.com/yourusername/trapper-keeper-mcp"
Issues = "https://github.com/yourusername/trapper-keeper-mcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/trapper_keeper"]

[tool.coverage.run]
branch = true
source = ["trapper_keeper"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.hatch.version]
source = "vcs"
fallback-version = "0.1.0"

[tool.hatch.build.hooks.vcs]
version-file = "src/trapper_keeper/_version.py"

[tool.hatch.build]
include = [
    "src/trapper_keeper",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]
exclude = [
    "tests",
    "docs",
    ".github",
    "scripts",
    "Dockerfile",
    "docker-compose.yml",
    "Makefile",
]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
    -ra -q
    --strict-markers
    --strict-config
    --cov=trapper_keeper
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --no-cov-on-fail
    --maxfail=1
    --tb=short
"""
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.bandit]
targets = ["src"]
skip = ["B101", "B601"]  # Skip assert_used and shell_injection tests
exclude_dirs = ["tests", "docs", "scripts"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{38,39,310,311,312}, lint, type, docs
isolated_build = true

[testenv]
deps =
    .[test]
commands =
    pytest {posargs}

[testenv:lint]
skip_install = true
deps =
    black
    ruff
    isort
commands =
    black --check src tests
    ruff check src tests
    isort --check-only src tests

[testenv:type]
deps =
    .[dev]
    types-aiofiles
    types-PyYAML
    types-setuptools
commands =
    mypy src

[testenv:docs]
deps =
    .[docs]
commands =
    mkdocs build
"""
