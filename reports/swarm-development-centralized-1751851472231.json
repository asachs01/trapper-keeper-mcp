{
  "objective": "You are Claude Code, an expert Python developer and MCP server architect. Your task is to implement Trapper Keeper MCP - a Python-based MCP server that automatically manages and organizes project documentation using the \"document reference pattern\".\n\n**CRITICAL REQUIREMENTS:**\n1. Use FastMCP (https://gofastmcp.com/getting-started/welcome) as the MCP server framework\n2. Use Taskmaster to manage all implementation tasks and project phases\n3. Follow TDD approach - write tests for each feature before implementation\n4. Start with MVP (core organization + MCP server), then expand using Taskmaster phases\n5. This is a FRESH Python implementation - ignore any existing TypeScript code\n\n**PROJECT OVERVIEW:**\nTrapper Keeper MCP solves documentation chaos by automatically organizing CLAUDE.md files that grow too large (500+ lines), extracting content into categorized /docs/ structure with emoji-based visual references, and maintaining clean AI context.\n\n**MVP CORE FEATURES:**\n- Monitor CLAUDE.md file size and suggest extractions at 200+ lines\n- Auto-create organized /docs/ structure with consistent naming\n- Maintain reference links with visual emoji categorization\n- Smart content extraction based on document types\n- MCP server tools: organize_documentation, extract_content, create_reference, validate_structure\n\n**EMOJI CATEGORIZATION SYSTEM:**\nüèóÔ∏è Architecture | üóÑÔ∏è Database | üîê Security | ‚úÖ Features | üìä Monitoring | üö® Critical | üìã Setup | üåê API\n\n**TASKMASTER WORKFLOW:**\n1. Initialize Taskmaster project with MVP tasks\n2. Create development phases for expansion features\n3. Use Taskmaster to track progress and manage parallel development\n4. Break down complex features into manageable subtasks\n\n**TECHNICAL STACK:**\n- Python 3.8+ with FastMCP framework\n- File system monitoring and manipulation\n- Markdown parsing and generation\n- Pattern recognition for content categorization\n- MCP protocol implementation via FastMCP\n\n**PARALLEL DEVELOPMENT TARGETS:**\n- MCP Server: Core organization engine with FastMCP tools\n- CLI Interface: User-friendly commands for manual operations\n- Testing Suite: Comprehensive test coverage for all features\n- Documentation: Clear setup and usage guides\n\n**DELIVERABLES:**\n1. Working FastMCP-based MCP server with core tools\n2. CLI interface for manual operations\n3. Comprehensive test suite with TDD approach\n4. Project structure following Python best practices\n5. Taskmaster project file with expansion roadmap\n\nStart by initializing Taskmaster, then implement MVP features with parallel MCP server and CLI development. Focus on clean, maintainable code that scales. When initializing taskmaster, make sure that you also ensure that you use the `--append` flag so that you do not overwrite the existing project file and that you use `-r` to allow it to use perplexity to research and ensure that tasks are much more clearly defined. ",
  "strategy": "development",
  "mode": "centralized",
  "maxAgents": 7,
  "timeout": 60,
  "parallel": true,
  "monitor": false,
  "output": "json",
  "outputDir": "./reports",
  "timestamp": "2025-07-07T01:24:32.227Z",
  "id": "swarm-development-centralized-1751851472231"
}